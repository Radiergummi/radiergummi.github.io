<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Moritz Friedrich</title><link>https://www.moritzfriedrich.com/projects/</link><description>Recent content in Projects on Moritz Friedrich</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Feb 2018 12:21:57 -0500</lastBuildDate><atom:link href="https://www.moritzfriedrich.com/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Massively Parallel PHP</title><link>https://www.moritzfriedrich.com/projects/massively-parallel-php/</link><pubDate>Mon, 29 Jun 2020 12:35:04 +0200</pubDate><guid>https://www.moritzfriedrich.com/projects/massively-parallel-php/</guid><description>With most large software systems, sooner or later a need arises to perform certain jobs in parallel. We usually solve this problem with some sort of job queue which schedules work to be processed later, asynchronously, in a separate process. While PHP might not be the first language that jumps to mind for long-running workers, it was still the best possible choice at MessengerPeople. How so? We have a huge ecosystem of applications, shared libraries and conventions, all built with PHP.</description></item><item><title>Application Framework</title><link>https://www.moritzfriedrich.com/projects/application-framework/</link><pubDate>Tue, 17 Mar 2020 10:13:38 +0100</pubDate><guid>https://www.moritzfriedrich.com/projects/application-framework/</guid><description>Driven by the need to reuse domain-specific code, I started working on a unified base framework for every application we run. At the time of writing, this amounts to 37 individual services, both console and web applications.
Before the lamentation starts, let me be clear on one important point: I did not build a fresh framework, of course! There&amp;rsquo;s lots of smarter people than me who have put a lot of thought into existing options.</description></item><item><title>Internal CLI</title><link>https://www.moritzfriedrich.com/projects/cli/</link><pubDate>Tue, 17 Mar 2020 10:12:39 +0100</pubDate><guid>https://www.moritzfriedrich.com/projects/cli/</guid><description>As a company grows, its infrastructure grows with it. This makes it more and more unwieldy to manage all tools involved: Status dashboards, the company CRM, cloud provider control panels and home-grown software are all required to keep the business running, and everything needs to more or less work. Sometimes, there&amp;rsquo;s a database query nobody ever cared enough about to build an interface for it: Say, archiving a customer, or checking the activity status of a bunch of customers by some arcane filter.</description></item><item><title>Rabbit MQ</title><link>https://www.moritzfriedrich.com/projects/rabbitmq/</link><pubDate>Tue, 17 Mar 2020 10:11:59 +0100</pubDate><guid>https://www.moritzfriedrich.com/projects/rabbitmq/</guid><description>Whoops! Sorry, I&amp;rsquo;m still working on that one. Check back later!</description></item></channel></rss>